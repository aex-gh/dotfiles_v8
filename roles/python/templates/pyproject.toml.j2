[project]
name = "new-project"
version = "0.1.0"
description = "A new Python project"
authors = [
    {name = "{{ git_user_name | default('Your Name') }}", email = "{{ git_user_email | default('you@example.com') }}"}
]
dependencies = []
requires-python = ">={{ python_default_version }}"
readme = "README.md"
license = {text = "MIT"}

[project.urls]
Homepage = "https://github.com/{{ git_user_name | default('username') }}/new-project"
Repository = "https://github.com/{{ git_user_name | default('username') }}/new-project"

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "ruff>=0.1.0", 
    "black>=23.0",
    "mypy>=1.0",
    "pre-commit>=3.0",
    "pytest-cov>=4.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
dev-dependencies = [
    "pytest>=7.0",
    "ruff>=0.1.0",
    "black>=23.0", 
    "mypy>=1.0",
    "pre-commit>=3.0",
    "pytest-cov>=4.0",
]

[tool.ruff]
line-length = 88
target-version = "py{{ python_default_version | replace('.', '') }}"
exclude = [
    ".bzr",
    ".direnv", 
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "N",  # pep8-naming
    "UP", # pyupgrade
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long, handled by black
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["S101", "S105", "S106", "S107"]

[tool.black]
line-length = 88
target-version = ["py{{ python_default_version | replace('.', '') }}"]
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "{{ python_default_version }}"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
]
